#define MAX_NELS_PER_CELL 62 //Should be a power of two minus two for better alignment

typedef struct{
	float4 v0;
	float4 v1;
	float4 v2;
} Triangle;

typedef struct{
	float4 vmin;
	float4 vmax;
} Box;

typedef struct{
	uint nels;
	ushort elem_index[MAX_NELS_PER_CELL];
} Cell;

//MWC64x, an RNG made by David B. Tomas, with custom seeding
//Source: http://cas.ee.ic.ac.uk/people/dt10/research/rngs-gpu-mwc64x.html

typedef struct{ uint2 x; uint2 c; } mwc64xvec2_state_t;

inline float2 MWC64XVEC2(mwc64xvec2_state_t *s, float leftLimit, float rightLimit)
{
    enum{ MWC64XVEC2_A = 4294883355U };
    uint2 x=s->x, c=s->c;
    uint2 res=x^c;                     // Calculate the result
    uint2 hi=mul_hi(x,MWC64XVEC2_A);              // Step the RNG
    x=x*MWC64XVEC2_A+c;
    c=hi+convert_uint2(x<c);
    s->x=x;
    s->c=c;             // Pack the state back up
    return leftLimit + convert_float2(res)*((rightLimit - leftLimit)/4294967295);
}

//Another simple RNG (often used in hashing) to randomize local id or global id
inline uint randomizeId(uint id)
{
        id = (id ^ 61) ^ (id >> 16);
        id *= 9;
        id = id ^ (id >> 4);
        id *= 0x27d4eb2d;
        id = id ^ (id >> 15);
        return id;
 }

//Mix seeds with randomized id
inline void MWC64XVEC2_Seeding(mwc64xvec2_state_t *s, uint4 seeds){
	const int i = get_global_id(1) * get_global_size(0) + get_global_id(0);
	s->x = (uint2)((seeds.x) ^ randomizeId(i), (seeds.y) ^ randomizeId(i));
	s->c = (uint2)((seeds.z) ^ randomizeId(i), (seeds.w) ^ randomizeId(i));
}

//Defined as operator! in the simple CPU tracer
inline float4 Normalize(float4 x){
	return ((1/sqrt(dot(x, x))) * x);
}

inline bool BoxIntersect(const float4 origin, const float4 direction, const Box box, float * t){
	const float4 invRayDir = 1/direction;
	const float4 t1 = (box.vmin - origin) * invRayDir;
	const float4 t2 = (box.vmax - origin) * invRayDir;
	const float4 tNear = fmin(t1, t2);
	const float4 tFar = fmax(t1, t2);

	const float l0 = fmax(fmax(tNear.x, tNear.y), fmax(tNear.x, tNear.z));
    const float l1 = fmin(fmin(tFar.x, tFar.y), fmin(tFar.x, tFar.z));
	if (l0 < *t && l1 > l0){
		*t = l0;
		return true;
	}
	return false;
}

inline void swap(float * x, float * y){	
	const float tmp = *x;	
	*x = *y;	
	*y = tmp;	
}	

inline int BoxIntersect2(float4 origin, float4 direction, const Box box, float * t){ 	
    float tmin = (box.vmin.x - origin.x) / direction.x; 	
    float tmax = (box.vmax.x - origin.x) / direction.x; 	

    if (tmin > tmax) swap(&tmin, &tmax); 	

    float tymin = (box.vmin.y - origin.y) / direction.y; 	
    float tymax = (box.vmax.y - origin.y) / direction.y; 	

    if (tymin > tymax) swap(&tymin, &tymax); 	

    if ((tmin > tymax) || (tymin > tmax)) 	
        return false; 	

    if (tymin > tmin) 	
        tmin = tymin; 	

    if (tymax < tmax) 	
        tmax = tymax; 	

    float tzmin = (box.vmin.z - origin.z) / direction.z; 	
    float tzmax = (box.vmax.z - origin.z) / direction.z; 	

    if (tzmin > tzmax) swap(&tzmin, &tzmax); 	

    if ((tmin > tzmax) || (tzmin > tmax)) 	
        return 0; 	

    if (tzmin > tmin) 	
        tmin = tzmin; 	

    if (tzmax < tmax) 	
        tmax = tzmax; 	
	
	*t = tmin;
    return 1; 	
}

//Check for triangle intersection (Moller-Trumbore)
inline bool TriangleIntersect(float4 origin, float4 direction, const Triangle curr_triangle, float * t, float4 * normal){

	const float4 edge0 = curr_triangle.v1 - curr_triangle.v0;
	const float4 edge2 = curr_triangle.v2 - curr_triangle.v0;

	const float4 pvec = cross(direction, edge2);
	const float det = dot(edge0, pvec);
	if(fabs(det) < 0.01f)	return false;
	const float invDet = 1/det;
	const float4 tvec = origin - curr_triangle.v0;
	const float barycentric_u = dot(tvec, pvec) * invDet;
	if(barycentric_u < 0 || barycentric_u > 1) return false;
	const float4 qvec = cross(tvec, edge0);
	const float barycentric_v = dot(direction, qvec) * invDet;
	if (barycentric_v < 0 || barycentric_u+barycentric_v > 1) return false;
	const float rayDist = dot(edge2, qvec) * invDet;

	//Ray hits the triangle
	if(rayDist < *t){
		*t = rayDist;
		*normal = Normalize(cross(edge0, edge2));
		return true;
	}
	return false;
}

inline bool CellIntersect(float4 origin, float4 direction, Cell c, global const Triangle * restrict Triangles, float * t, float4 * normal){
	Triangle curr_triangle;
	bool triangleFound = false;
	for (int i=0; i<c.nels; ++i){
		curr_triangle = Triangles[c.elem_index[i]];
		if (TriangleIntersect(origin, direction, curr_triangle, t, normal)) triangleFound = true;
	}
	return triangleFound;
}

inline bool IsPointInside(float4 origin, const Box trianglesBox){
	if (origin.x >= trianglesBox.vmin.x && origin.x <= trianglesBox.vmax.x && origin.y >= trianglesBox.vmin.y && origin.y <= trianglesBox.vmax.y && origin.z >= trianglesBox.vmin.z && origin.z <= trianglesBox.vmax.z) return true;
	else return false;
}

inline int TraceRay(float4 origin, float4 direction, float * t, float4 * normal, 
	local int * restrict Spheres, local int * restrict Squares, 
	global const Triangle * restrict Triangles, int ntriangles, const Box trianglesBox,
	global const Cell * restrict TriangleGrid, const int4 grid_res,
	const float4 cell_size){

	int m = 0;	//default material
	float rayDist;
	float4 intersection;

	//Check for floor intersection
	rayDist = -origin.z / direction.z;
	if(.01f < rayDist && rayDist < *t){
		*t = rayDist;
		*normal = (float4)(0, 0, 1, 0);
		m = 1;
	}
	
	//Check for square intersection
	for(int k = 19; k--;){
		for(int j = 9; j--;){
			if(Squares[j] & 1 << k){
				rayDist = (4+j-origin.z)/direction.z;
				intersection = origin + direction * rayDist;
				if(rayDist < *t && (fabs(k-intersection.x)<1) && fabs(intersection.y)<1){
				//if(dist < *t && distance(intersection, (float4)(k, 0, j+4, 0))<2){	//Circle intersection with euclidean distance
					*t = rayDist;
					*normal = (float4)(0, 0, 1, 0);
					m = 3;
				}
			}
		}
	}
	//Check for sphere intersection
	for(int k = 19; k--;){
		for(int j = 9; j--;){
			if (Spheres[j] & 1 << k){
				float4 p = origin + (float4)(-k, 0, -j - 4, 0);
				float b = dot(p, direction);
				float c = dot(p, p) - 1;
				float q = b * b - c;

				//Does the ray hit the sphere?
				if(q > 0){
					rayDist = -b - sqrt(q);
					//It does, compute the distance camera-sphere
					if(rayDist < (*t) && rayDist > 0.01f){
						*t = rayDist;
						*normal = Normalize(p + direction * (*t));
						m = 3;
					}
				}
			}
		}
	}
	//Grid traversal
	const float4 invDir = 1/direction;
	const int4 invDirSign = (int4)(isgreaterequal(invDir, 0) << 31);
	const float4 tEntry = select((trianglesBox.vmax - origin)*invDir, (trianglesBox.vmin - origin)*invDir, invDirSign);
	const float4 tExit = select((trianglesBox.vmin - origin)*invDir, (trianglesBox.vmax - origin)*invDir, invDirSign);
	float t0 = min(tEntry.x, min(tEntry.y, tEntry.z));
	if (t0 > max(tExit.x, max(tExit.y, tExit.z))) return m;	//Ray does not hit the box
	const float4 grid_resF = convert_float4(grid_res);
	float4 p;
	if(IsPointInside(origin, trianglesBox)) p = origin;
	else p = origin + direction * t0;	//Initial hit point with bounding box
	int4 idx = clamp(convert_int4((p - trianglesBox.vmin)/cell_size), (int4)(0), grid_res - (int4)(1, 1, 1, 0));
	//Ray parameter increments per cell
	float4 delta = (tExit - tEntry)/grid_resF;
	const int4 rayDirSign = (int4)(isgreater(direction, 0) << 31);
	float4 next = select(tEntry + convert_float4(grid_res - idx)*delta, tEntry + (idx + (float4)(1, 1, 1, 0)) * delta, rayDirSign);
	int4 step = select((int4)(-1, -1, -1, 0), (int4)(1, 1, 1, 0), rayDirSign);
	int4 stop = select((int4)(-1, -1, -1, 0), grid_res, rayDirSign);
	float * next_p = (float*)(&next);
	float * delta_p = (float*)(&delta);
	int * step_p = (int*)(&step);
	int * stop_p = (int*)(&stop);
	int * idx_p = (int*)(&idx);
	//Traversal loop
	while (true){
		const int cellIndex = idx.s2 * grid_res.x * grid_res.y + idx.s1 * grid_res.x + idx.s0;
		const Cell curr_cell = TriangleGrid[cellIndex];
		if (curr_cell.nels > 0){
			if(CellIntersect(origin, direction, curr_cell, Triangles, t, normal)) m = 4;
		}
		float minimal = fmin(next.s0, fmin(next.s1, next.s2));
		uchar axis = 0;
		while(minimal != next_p[axis]) axis++;
		next_p[axis] += delta_p[axis];
		idx_p[axis] += step_p[axis];
		if(idx_p[axis] == stop_p[axis]) break;
	}
	
	return m;
}

inline float4 Sample(float4 * origin, float4 * direction, mwc64xvec2_state_t * rng, 
	local int * restrict Spheres, local int * restrict Squares, 
	global const Triangle * restrict Triangles, int ntriangles,
	const Box trianglesBox, global const Cell * restrict TriangleGrid, const int4 grid_res,
	const float4 cell_size, local float4 * restrict scenelights, int nlights){
	//Recursion vars
	float4 colorFact = (float4)(0, 0, 0, 0);
	int divFact = 1;

	float2 randValues;
	float4 intersection, half_vec;
	float t;

	float4 normal, light_dir, light_pos;
	float distanceFromLight, light_intensity;
	float lamb_f, color, total_illumination = 0.0f;

	int material;
	for(int maxIter = 5; maxIter--;){
		t = 1e9;	//default distance
		material = TraceRay(*origin, *direction, &t, &normal, Spheres, Squares, Triangles, ntriangles, trianglesBox, TriangleGrid, grid_res, cell_size);
		if (!material){
			//Nothing found and the ray goes upward: Generate a sky color
			return colorFact + (float4)(0.7f, 0.6f, 1.0f, 0) * pow(1 - (*direction).z, 4) / divFact;
		}

		//Something was hit
		intersection = (*origin) + (*direction) * t;

		//Compute total illumination factor by checking all point lights
		for(int i=0; i<nlights; ++i){
			randValues = MWC64XVEC2(rng, 0.0f, 1.0f);
			light_pos = scenelights[i];
			light_intensity = light_pos.w;
			light_pos.w = 0;
			light_dir = Normalize(light_pos + (float4)(randValues,0,0) + intersection * (-1));

			//Calculate the lambertian factor
			lamb_f = dot(light_dir, normal);

			//Calculate illumination factor (lambertian coefficient > 0 or in shadow)?
			//half_vec is just a dummy variable because we don't want the normal to be updated
			if(lamb_f < 0 || TraceRay(intersection, light_dir, &t, &half_vec, Spheres, Squares, Triangles, ntriangles, trianglesBox, TriangleGrid, grid_res, cell_size)){
				lamb_f = 0;
			}
			else{
				//Objects away from the light should have less illumination (Inverse square law)
				distanceFromLight = distance(light_pos, intersection);
				total_illumination += lamb_f * min(light_intensity/(distanceFromLight*distanceFromLight), 1.0f);
			}
		}

		if(total_illumination > 1.0f) total_illumination = 1.0f;
		total_illumination /= 4;
		//printf("avg_ill: %f\n", total_illumination);

		if(material == 1){
			//Nothing was hit and the ray was going downward: Generate floor checkerboard texture
			intersection = intersection * 0.2f;
			return colorFact+((int)(ceil(intersection.x) + ceil(intersection.y)) & 1 ? (float4)(3, 1, 1, 0) : (float4)(3, 3, 3, 0)) * (total_illumination) / divFact;
		}
		if(material == 3){	//diffuse shader
			float4 diffuseColor = (float4)(2, 3, 2, 0);
			return colorFact + (diffuseColor * (total_illumination)) / divFact;
		}
		if(material == 4){	//facing ratio
			return colorFact + max(0.0f, dot(normal, -(*direction)))/ divFact;
		}
		//m == 2 A reflective surface was hit. Cast a ray bouncing from it.
		//Attenuate color by 50% since it is bouncing (* 0.5)
		//Unrolled recursion with a loop and by updating those factors
		else{
			half_vec = (*direction) + normal * (dot(normal, *direction) * (-2));
			color = pow(dot(light_dir, half_vec) * (total_illumination > 0), 99);
			colorFact += (float4)(color, color, color, 0) * divFact;
			*origin = intersection;
			*direction = half_vec;
			divFact *= 2;
		}
	}
}

inline void atomic_addTriangle(volatile global Cell* c, const int triangleID){
	int old = atomic_inc(&(c->nels));
	if (old >= MAX_NELS_PER_CELL) return;
	c->elem_index[old] = triangleID;
}
/*
//Add a triangle to a cell only if it is not being accessed by another work item (and it fits in the cell)
//Only works with 64 bit cells and needs the extension for 64 bit atomics
inline void atomic_addTriangle64(volatile global Cell* val, const int triangleID){
  union {
  Cell f;
  ulong  i;
  } old, new;

  do
  {
   old.f = *val;
   if (old.f.nels >= 3) return;
   Cell temp = old.f;
   temp.elem_index[temp.nels++] = triangleID;
   new.f = temp;
  }
  while (atom_cmpxchg((volatile __global ulong *)val, old.i, new.i) != old.i);

}
*/
kernel void initTrianglesGrid(global Cell * restrict TrianglesGrid, global const Triangle * restrict Triangles, const float4 trianglesBoxMin, const int4 grid_res, const float4 cell_size){
	const int gi = get_global_id(0);
	barrier(CLK_GLOBAL_MEM_FENCE);
	const Triangle t = Triangles[gi];
	Box curr_box;
	//Compute triangle bounding box
	curr_box.vmin = fmin(t.v0, fmin(t.v1, t.v2));
	curr_box.vmax = fmax(t.v0, fmax(t.v1, t.v2));
	//Convert to cell coordinates
	const int4 min = clamp(convert_int4((curr_box.vmin-trianglesBoxMin)/cell_size), (int4)(0), grid_res-(int4)(1, 1, 1, 0));
	const int4 max = clamp(convert_int4((curr_box.vmax-trianglesBoxMin)/cell_size), (int4)(0), grid_res-(int4)(1, 1, 1, 0));
	for(int z = min.z; z <= max.z; ++z){
		for(int y = min.y; y <= max.y; ++y){
			for(int x = min.x; x <= max.x; ++x){
				const int index = z*grid_res.x*grid_res.y + y*grid_res.x + x;
				atomic_addTriangle((volatile global Cell*)(TrianglesGrid+index), gi);
			}
		}
	}
}

kernel void printTrianglesGrid(const global Cell * restrict TrianglesGrid){
	return;
	const int gi = get_global_id(0);
	const Cell c = TrianglesGrid[gi];
	for(int i=0; i<c.nels; ++i){
		printf("Cell %d, triangle index %hu, nels %hu\n", gi, c.elem_index[i], c.nels);
	}
	if(gi == 0){
		int tot_nels = 0;
		for(int i=0; i < get_global_size(0); ++i){
			tot_nels += TrianglesGrid[i].nels; 
		}
		printf("Tot nels: %d\n", tot_nels);
	}
}

kernel void pathTracer(global uchar4 * restrict img, global const int * restrict Spheres, 
	global const int * restrict Squares, global const Triangle * restrict Triangles, int ntriangles,
	const Box trianglesBox, global const Cell * restrict TriangleGrid, const int4 grid_res,
	const float4 cell_size, global const float4 * restrict scenelights, int nlights, 
	float4 cam_forward, float4 cam_up, float4 cam_right, float4 eye_offset, uint4 seeds,
	local int * restrict lSpheres, local int * restrict lSquares, local float4 * restrict lScenelights){
	float4 color = (float4)(13, 13, 13, 0);
	int i = get_global_id(0);
	int j = get_global_id(1);
	int li = get_local_id(0) + get_local_id(1) * get_local_size(0);
	mwc64xvec2_state_t rng;
	MWC64XVEC2_Seeding(&rng, seeds);
	float4 randValues;
	float4 origin, direction, delta;

	if (li < 9){
		lSpheres[li]=Spheres[li];
		lSquares[li]=Squares[li];
	}

	if(li < nlights){
		lScenelights[li]=scenelights[li];
	}
	barrier(CLK_LOCAL_MEM_FENCE);
	for(int r = 64; r--;){
		randValues = (float4)(MWC64XVEC2(&rng, 0.0f, 1.0f),MWC64XVEC2(&rng, 0.0f, 1.0f));
		delta = cam_up * ((randValues.x - 0.5f) * 99) + cam_right * ((randValues.y - 0.5f) * 99);
		origin = (float4)(17, 16, 8, 0) + delta;	//cam_pos + delta
		direction = Normalize(delta * (-1) + (cam_up * (randValues.z + i) + cam_right * (j + randValues.w) + eye_offset) * 16);
		color = Sample(&origin, &direction, &rng, lSpheres, lSquares, Triangles, ntriangles, trianglesBox, TriangleGrid, grid_res, cell_size, lScenelights, nlights) * 3.5f + color;
	}
	color.w = 255;
	img[j*get_global_size(0)+i]=convert_uchar4(color);
}

