//MWC64x, an RNG made by David B. Tomas, with custom seeding
//Source: http://cas.ee.ic.ac.uk/people/dt10/research/rngs-gpu-mwc64x.html

typedef struct{ uint4 x; uint4 c; } mwc64xvec4_state_t;

inline float4 MWC64XVEC4(mwc64xvec4_state_t *s, float leftLimit, float rightLimit)
{
    enum{ MWC64XVEC4_A = 4294883355U };
    uint4 x=s->x, c=s->c;
    uint4 res=x^c;                     // Calculate the result
    uint4 hi=mul_hi(x,MWC64XVEC4_A);              // Step the RNG
    x=x*MWC64XVEC4_A+c;
    c=hi+convert_uint4(x<c);
    s->x=x;
    s->c=c;             // Pack the state back up
    return leftLimit + convert_float4(res)*((rightLimit - leftLimit)/4294967295);
}

//Another simple RNG (often used in hashing) to randomize local id or global id
inline uint randomizeId(uint id)
{
        id = (id ^ 61) ^ (id >> 16);
        id *= 9;
        id = id ^ (id >> 4);
        id *= 0x27d4eb2d;
        id = id ^ (id >> 15);
        return id;
 }

//Mix seeds with randomized global ids
inline void MWC64XVEC4_Seeding(mwc64xvec4_state_t *s, uint4 seeds){
	const int gi = get_global_id(0) + 1;
	//const int li = get_local_id(0) + 1;
	const int li = get_global_id(1) + 1;
	s->x = (uint4)((seeds.x) ^ randomizeId(gi&li), (seeds.y*seeds.z) ^ randomizeId(gi&li), (seeds.y*(seeds.w & 131071)) ^ randomizeId(gi+li), ((seeds.x & 131071)*seeds.y) ^ randomizeId(gi+li));
	s->c = (uint4)((seeds.w) ^ randomizeId(gi+li), (seeds.w ^ seeds.x) ^ randomizeId(gi+li), (seeds.z*seeds.x) ^ randomizeId(gi & li), (seeds.z*(seeds.w & 131071)) ^ randomizeId(gi & li));
}

kernel void imginit_buf(global uchar4 * img)
{
	const int j = get_global_id(1);
	const int i = get_global_id(0);
	const int size = get_global_size(0);

	img[j*size+i] = (uchar4)(255, 255, 255, 255);
}

//Defined as operator! in the simple CPU tracer
inline float4 NotOperator(float4 x){
	return ((1/sqrt(dot(x, x))) * x);
}

inline int TraceRay(float4 origin, float4 destination, float * t, float4 * normal){

	int G[] = {247570, 280596, 280600, 249748, 18578, 18577, 231184, 16, 16};
	//printf("Does it even get here tracing\n");
	*t = 1e9;
	int m = 0;
	float p1 = -origin.z / destination.z;
	//printf("p1: %f\n", p1);
	if(.01f < p1){
		*t = p1;
		*normal = (float4)(0, 0, 1, 0);
		m = 1;
	}
	for(int k = 19; k--;){
		for(int j = 9; j--;){
			if (G[j] & 1 << k){
				float4 p = origin + (float4)(-k, 0, -j-4, 0);
				float b = dot(p, destination);
				float c = dot(p, p - 1.0f);
				float q = b * b - c;
				//printf("b: %f\n", b);

				//Does the ray hit the sphere?
				if(q > 0){
					float s = -b - sqrt(q);
					//It does, compute the distance camera-sphere
					if(s < (*t) && s > 0.01f){
						*t = s;
						*normal = NotOperator(p + destination * (*t));
						m = 2;
					}
				}
			}
		}
	}
	return m;
}

inline float4 Sample(float4 * origin, float4 * destination, mwc64xvec4_state_t * rng){
	//Recursion vars
	float4 colorFact = (float4)(0, 0, 0, 0);
	int divFact = 1;
	float4 randValues;
	float4 intersection, half_vec;
	float t;
	float4 normal, light_dir;
	float lamb_f, color;
	int match;
	while(true){
		randValues = MWC64XVEC4(&rng, 0.0f, 1.0f);
		match = TraceRay(*origin, *destination, &t, &normal);
		//printf("Does it even get here sampling\n");
		if (!match){
			//No sphere found and the ray goes upward: Generate a sky color
			return colorFact + (float4)(0.7f, 0.6f, 1.0f, 0) * pow(1.0f - (*destination).z, 4) / divFact;
		}

		//A sphere was maybe hit
		intersection = *origin + *destination * t;
		//printf("%d %d destination: %f %f %f\n", get_global_id(0), get_global_id(1), destination.x, destination.y, destination.z);
		light_dir = NotOperator((float4)(9 + randValues.x, 9.0f + randValues.y, 16.0f, 0) + intersection * (-1));
		//printf("%d %d lightdir: %f %f %f\n", get_global_id(0), get_global_id(1), light_dir.x, light_dir.y, light_dir.z);
		half_vec = *destination + normal * (dot(normal, *destination) * (-2));

		//Calculate the lambertian factor
		lamb_f = dot(light_dir, normal);

		//printf("%d %d lamb: %f\n", get_global_id(0), get_global_id(1), lamb_f);

		//Calculate illumination factor (lambertian coefficient > 0 or in shadow)?
		if(lamb_f < 0 || TraceRay(intersection, light_dir, &t, &normal)){
			lamb_f = 0;
		}

		color = pow(dot(light_dir, half_vec) * (lamb_f > 0), 99);
		//float color = pow(ScalarProduct(light_dir, half_vec * (lamb_f>0)), 99);

		if(match & 1){
			//No sphere was hit and the ray was going downward: Generate a floor color
			intersection = intersection * 0.2f;
			return colorFact+((int)(ceil(intersection.x) + ceil(intersection.y)) & 1 ? (float4)(3, 1, 1, 0) : (float4)(3, 3, 3, 0)) * (lamb_f * 0.2f + 0.1f) / divFact;
		}
		//m == 2 A sphere was hit. Cast a ray bouncing from the sphere surface.
		//Attenuate color by 50% since it is bouncing (* 0.5)
		//Unrolled recursion with an infinite loop and by updating those factors
		else{
			colorFact += (float4)(color, color, color, 0);
			*origin = intersection;
			*destination = half_vec;
			divFact *= 2;
		}
	}
}

kernel void pathTracer(global uchar4 * img, float4 cam_forward, float4 cam_up, float4 cam_right, float4 cam_something, uint4 seeds){
	float4 color = (float4)(13, 13, 13, 0);
	int i = get_global_id(0);
	int j = get_global_id(1);
	mwc64xvec4_state_t rng;
	MWC64XVEC4_Seeding(&rng, seeds);
	float4 randValues1 = MWC64XVEC4(&rng, 0.0f, 1.0f);
	float4 origin, destination, delta;
	//printf("%d %d seeds %d %d, rand %f %f\n", i, j, seeds.x, seeds.y, randValues1.x, randValues2.x);
	for(int r = 64; r--;){
		delta = cam_up * ((randValues1.x - 0.5f) * 99.0f) + cam_right * ((randValues1.y - 0.5f) * 99.0f);
		origin = (float4)(17, 16, 8, 0) + delta;
		destination = NotOperator(delta * (-1) + (cam_up * (randValues1.z + i) + cam_right * (j + randValues1.w) + cam_something) * 16.0f);
		color = Sample(&origin, &destination, &rng) * 3.5f + color;
	}
	//printf("Pixel %d all done\n", j*get_global_size(0)+i);
	color.w = 255;
	printf("Color %d %d: %f, %f, %f, %f\n", i, j, color.x, color.y, color.z, color.w);
	img[j*get_global_size(0)+i]=convert_uchar4(color);
}

