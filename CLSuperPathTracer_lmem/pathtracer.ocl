typedef struct{
	float4 v0;
	float4 v1;
	float4 v2;
} Triangle;

//MWC64x, an RNG made by David B. Tomas, with custom seeding
//Source: http://cas.ee.ic.ac.uk/people/dt10/research/rngs-gpu-mwc64x.html

typedef struct{ uint4 x; uint4 c; } mwc64xvec4_state_t;

inline float4 MWC64XVEC4(mwc64xvec4_state_t *s, float leftLimit, float rightLimit)
{
    enum{ MWC64XVEC4_A = 4294883355U };
    uint4 x=s->x, c=s->c;
    uint4 res=x^c;                     // Calculate the result
    uint4 hi=mul_hi(x,MWC64XVEC4_A);              // Step the RNG
    x=x*MWC64XVEC4_A+c;
    c=hi+convert_uint4(x<c);
    s->x=x;
    s->c=c;             // Pack the state back up
    return leftLimit + convert_float4(res)*((rightLimit - leftLimit)/4294967295);
}

//Another simple RNG (often used in hashing) to randomize local id or global id
inline uint randomizeId(uint id)
{
        id = (id ^ 61) ^ (id >> 16);
        id *= 9;
        id = id ^ (id >> 4);
        id *= 0x27d4eb2d;
        id = id ^ (id >> 15);
        return id;
 }

//Mix seeds with randomized global id and local id
inline void MWC64XVEC4_Seeding(mwc64xvec4_state_t *s, uint4 seeds){
	const int i = get_global_id(1) * get_global_size(0) + get_global_id(0);
	s->x = (uint4)((seeds.x) ^ randomizeId(i), (seeds.y ^ seeds.z) ^ randomizeId(i), (seeds.y ^ seeds.w) ^ randomizeId(i), (seeds.x ^ seeds.y) ^ randomizeId(i));
	s->c = (uint4)((seeds.w) ^ randomizeId(i), (seeds.w ^ seeds.x) ^ randomizeId(i), (seeds.z ^ seeds.x) ^ randomizeId(i), (seeds.z ^ seeds.w) ^ randomizeId(i));
}

kernel void imginit_buf(global uchar4 * img)
{
	const int j = get_global_id(1);
	const int i = get_global_id(0);
	const int size = get_global_size(0);

	img[j*size+i] = (uchar4)(255, 255, 255, 255);
}

//Defined as operator! in the simple CPU tracer
inline float4 Normalize(float4 x){
	return ((1/sqrt(dot(x, x))) * x);
}

inline int TraceRay(float4 origin, float4 direction, float * t, float4 * normal, 
	local int * Spheres, local int * Planes, local Triangle * Triangles, int ntriangles){

	int m = 0;	//default material
	float rayDist;
	float4 intersection;

	//Triangle check vars
	Triangle curr_triangle;
	float4 edge0, edge2; 
	//Moller-Trumbore solution
	float4 pvec, qvec, tvec;
	float det, invDet, barycentric_u, barycentric_v;

	//Check for floor intersection
	rayDist = -origin.z / direction.z;
	if(.01f < rayDist && rayDist < *t){
		*t = rayDist;
		*normal = (float4)(0, 0, 1, 0);
		m = 1;
	}
	
	//Check for plane intersection
	for(int k = 19; k--;){
		for(int j = 9; j--;){
			if(Planes[j] & 1 << k){
				rayDist = (4+j-origin.z)/direction.z;
				intersection = origin + direction * rayDist;
				if(rayDist < *t && (fabs(k-intersection.x)<1) && fabs(intersection.y)<1){
				//if(dist < *t && distance(intersection, (float4)(k, 0, j+4, 0))<2){	//Circle intersection with euclidean distance
					*t = rayDist;
					*normal = (float4)(0, 0, 1, 0);
					m = 3;
				}
			}
		}
	}
	//Check for sphere intersection
	for(int k = 19; k--;){
		for(int j = 9; j--;){
			if (Spheres[j] & 1 << k){
				float4 p = origin + (float4)(-k, 0, -j - 4, 0);
				float b = dot(p, direction);
				float c = dot(p, p) - 1;
				float q = b * b - c;

				//Does the ray hit the sphere?
				if(q > 0){
					rayDist = -b - sqrt(q);
					//It does, compute the distance camera-sphere
					if(rayDist < (*t) && rayDist > 0.01f){
						*t = rayDist;
						*normal = Normalize(p + direction * (*t));
						m = 3;
					}
				}
			}
		}
	}
	
	//Check for triangle intersection (Moller-Trumbore)
	for(int i=0; i<ntriangles; i++){
		curr_triangle = Triangles[i];
		edge0 = curr_triangle.v1 - curr_triangle.v0;
		edge2 = curr_triangle.v2 - curr_triangle.v0;

		pvec = cross(direction, edge2);
		det = dot(edge0, pvec);
		if(fabs(det) < 0.01f)	continue;
		invDet = 1/det;
		tvec = origin - curr_triangle.v0;
		barycentric_u = dot(tvec, pvec) * invDet;
		if(barycentric_u < 0 || barycentric_u > 1) continue;
		qvec = cross(tvec, edge0);
		barycentric_v = dot(direction, qvec) * invDet;
		if (barycentric_v < 0 || barycentric_u+barycentric_v > 1) continue;
		rayDist = dot(edge2, qvec) * invDet;

		//Ray hits the triangle
		if(rayDist < *t){
			*t = rayDist;
			*normal = Normalize(cross(edge0, edge2));
			m = 4;
		}
	}
	
	return m;
}

inline float4 Sample(float4 * origin, float4 * direction, mwc64xvec4_state_t * rng, 
	local int * Spheres, local int * Planes, local Triangle * Triangles, int ntriangles,
	local float4 * scenelights, int nlights){
	//Recursion vars
	float4 colorFact = (float4)(0, 0, 0, 0);
	int divFact = 1;

	float4 randValues;
	float4 intersection, half_vec;
	float t;

	float4 normal, light_dir, light_pos;
	float distanceFromLight, light_intensity;
	float lamb_f, color, total_illumination = 0.0f;

	int material;
	for(int maxIter = 5; maxIter--;){
		t = 1e9;	//default distance
		material = TraceRay(*origin, *direction, &t, &normal, Spheres, Planes, Triangles, ntriangles);
		if (!material){
			//Nothing found and the ray goes upward: Generate a sky color
			return colorFact + (float4)(0.7f, 0.6f, 1.0f, 0) * pow(1 - (*direction).z, 4) / divFact;
		}

		//Something was hit
		intersection = (*origin) + (*direction) * t;

		//Compute total illumination factor by checking all point lights
		for(int i=0; i<nlights; ++i){
			randValues = MWC64XVEC4(rng, 0.0f, 1.0f);
			light_pos = scenelights[i];
			light_intensity = light_pos.w;
			light_pos.w = 0;
			light_dir = Normalize(light_pos + randValues + intersection * (-1));

			//Calculate the lambertian factor
			lamb_f = dot(light_dir, normal);

			//Calculate illumination factor (lambertian coefficient > 0 or in shadow)?
			//half_vec is just a dummy variable because we don't want the normal to be updated
			//if(lamb_f < 0 || TraceRay(intersection, light_dir, &t, &half_vec, Spheres, Planes, Triangles, ntriangles)){
			if(lamb_f < 0){
				lamb_f = 0;
			}
			else{
				//Objects away from the light should have less illumination (Inverse square law)
				distanceFromLight = distance(light_pos, intersection);
				total_illumination += lamb_f * min(light_intensity/(distanceFromLight*distanceFromLight), 1.0f);
			}
		}

		if(total_illumination > 1.0f) total_illumination = 1.0f;
		total_illumination /= 4;
		//printf("avg_ill: %f\n", total_illumination);

		if(material == 1){
			//Nothing was hit and the ray was going downward: Generate floor checkerboard texture
			intersection = intersection * 0.2f;
			return colorFact+((int)(ceil(intersection.x) + ceil(intersection.y)) & 1 ? (float4)(3, 1, 1, 0) : (float4)(3, 3, 3, 0)) * (total_illumination) / divFact;
		}
		if(material == 3){	//diffuse shader
			float4 diffuseColor = (float4)(2, 3, 2, 0);
			return colorFact + (diffuseColor * (total_illumination)) / divFact;
		}
		if(material == 4){	//facing ratio
			return colorFact + max(0.0f, dot(normal, -(*direction)))/ divFact;
		}
		//m == 2 A reflective surface was hit. Cast a ray bouncing from it.
		//Attenuate color by 50% since it is bouncing (* 0.5)
		//Unrolled recursion with an infinite loop and by updating those factors
		else{
			half_vec = (*direction) + normal * (dot(normal, *direction) * (-2));
			color = pow(dot(light_dir, half_vec) * (total_illumination > 0), 99);
			colorFact += (float4)(color, color, color, 0) * divFact;
			*origin = intersection;
			*direction = half_vec;
			divFact *= 2;
		}
	}
}

kernel void pathTracer(global uchar4 * img, global int * Spheres, global int * Planes, 
	global Triangle * Triangles, int ntriangles, global float4 * scenelights, int nlights,
	float4 cam_forward, float4 cam_up, float4 cam_right, float4 eye_offset, uint4 seeds,
	local int * lSpheres, local int * lPlanes, local Triangle* lTriangles, local float4 * lScenelights){
	float4 color = (float4)(13, 13, 13, 0);
	int i = get_global_id(0);
	int j = get_global_id(1);
	int li = get_local_id(0) + get_local_id(1) * get_local_size(0);
	int width = get_global_size(0);
	int height = get_global_size(1);
	mwc64xvec4_state_t rng;
	MWC64XVEC4_Seeding(&rng, seeds);
	float4 randValues;
	float4 origin, direction, delta;

	if (li < 9){
		lSpheres[li]=Spheres[li];
		lPlanes[li]=Planes[li];
	}

	if(li < nlights){
		lScenelights[li]=scenelights[li];
	}

	if(li < ntriangles){
		lTriangles[li]=Triangles[i];
	}
	barrier(CLK_LOCAL_MEM_FENCE);
	for(int r = 64; r--;){
		randValues = MWC64XVEC4(&rng, 0.0f, 1.0f);
		delta = cam_up * ((randValues.x - 0.5f) * 99) + cam_right * ((randValues.y - 0.5f) * 99);
		origin = (float4)(17, 16, 8, 0) + delta;
		direction = Normalize(delta * (-1) + (cam_up * (randValues.z + i) + cam_right * (j + randValues.w) + eye_offset) * 16);
		color = Sample(&origin, &direction, &rng, lSpheres, lPlanes, lTriangles, ntriangles, lScenelights, nlights) * 3.5f + color;
	}
	color.w = 255;
	//printf("Color %d %d: %f, %f, %f, %f\n", i, j, color.x, color.y, color.z, color.w);
	img[width*height - (j*width+i)]=convert_uchar4(color);
}

